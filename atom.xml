<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Surly 的 blog</title>
  
  <subtitle>it is ok</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://surlyyoung.github.io/"/>
  <updated>2019-02-27T07:29:51.121Z</updated>
  <id>https://surlyyoung.github.io/</id>
  
  <author>
    <name>Surly Young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>About Promise</title>
    <link href="https://surlyyoung.github.io/2019/02/27/About-Promise/"/>
    <id>https://surlyyoung.github.io/2019/02/27/About-Promise/</id>
    <published>2019-02-27T03:37:03.000Z</published>
    <updated>2019-02-27T07:29:51.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="About-Promise"><a href="#About-Promise" class="headerlink" title="About Promise"></a>About Promise</h1><h5 id="推荐阅读-Link"><a href="#推荐阅读-Link" class="headerlink" title="推荐阅读 Link"></a>推荐阅读 <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">Link</a></h5><h2 id="Basic-useage"><a href="#Basic-useage" class="headerlink" title="Basic useage"></a>Basic useage</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var promise1 = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">  var obj = &#123;code:200,message:<span class="string">'ok'</span>,data:<span class="string">''</span>&#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="title">function</span></span>() &#123; //发起请求，请求处理（异步操作）</span><br><span class="line">    resolve(obj); //成功之后</span><br><span class="line">  &#125;, 300);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1.then(<span class="keyword">function</span>(data) &#123;</span><br><span class="line">  console.log(data);</span><br><span class="line">  // expected output: &#123; code: 200, message: <span class="string">"ok"</span>, data: <span class="string">""</span> &#125;</span><br><span class="line">&#125;).catch(<span class="keyword">function</span>(e)&#123;console.log(e)&#125;);</span><br><span class="line"></span><br><span class="line">console.log(promise1);</span><br><span class="line">// expected output: [object Promise]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Promise( <span class="keyword">function</span>(resolve, reject) &#123;...&#125; /* executor */  );</span><br></pre></td></tr></table></figure><h3 id="参数-executor"><a href="#参数-executor" class="headerlink" title="参数 executor"></a>参数 executor</h3><blockquote><p>executor是带有 resolve 和 reject 两个参数的函数 。Promise构造函数执行时立即调用executor 函数， resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回新建对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected。<br>如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。</p></blockquote><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><blockquote><p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p></blockquote><blockquote><p>一个 Promise有以下几种状态:</p><ul><li>pending: 初始状态，既不是成功，也不是失败状态。</li><li>fulfilled: 意味着操作成功完成。</li><li>rejected: 意味着操作失败。</li></ul></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Promise.all(iterable)</p><blockquote><p>这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败</p></blockquote><p>Promise.race(iterable)</p><blockquote><p>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。</p></blockquote><p>Promise.reject(reason)</p><blockquote><p>返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法</p></blockquote><p>Promise.resolve(value)</p><blockquote><p>返回一个状态由给定value决定的Promise对象。如果该值是一个Promise对象，则直接返回该对象；如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用</p></blockquote><h2 id="Promise-原型"><a href="#Promise-原型" class="headerlink" title="Promise 原型"></a>Promise 原型</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>Promise.prototype.constructor</li></ul><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul><li>Promise.prototype.catch(onRejected)</li><li>Promise.prototype.then(onFulfilled, onRejected)</li><li>Promise.prototype.finally(onFinally)</li></ul><h2 id="创建Promise"><a href="#创建Promise" class="headerlink" title="创建Promise"></a>创建Promise</h2><blockquote><p>Promise 对象是由关键字 new 及其构造函数来创建的。该构造函数会把一个叫做“处理器函数”（executor function）的函数作为它的参数。这个“处理器函数”接受两个函数——resolve 和 reject ——作为其参数。当异步任务顺利完成且返回结果值时，去调用 resolve 函数；而当异步任务失败且返回失败原因（通常是一个错误对象）时，去调用reject 函数。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const myFirstPromise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  // ?做一些异步操作，最终会调用下面两者之一:</span><br><span class="line">  //</span><br><span class="line">  //   resolve(someValue); // fulfilled</span><br><span class="line">  // ?或</span><br><span class="line">  //   reject(<span class="string">"failure reason"</span>); // rejected</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>想要某个函数?拥有promise功能，只需让其返回一个promise即可。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> myAsyncFunction(url) &#123;</span><br><span class="line">  <span class="built_in">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    const xhr = new XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">"GET"</span>, url);</span><br><span class="line">    xhr.onload = () =&gt; resolve(xhr.responseText);</span><br><span class="line">    xhr.onerror = () =&gt; reject(xhr.statusText);</span><br><span class="line">    xhr.send();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="高级示例-使用XHR-和-promise-加载图像"><a href="#高级示例-使用XHR-和-promise-加载图像" class="headerlink" title="高级示例 使用XHR 和 promise 加载图像"></a>高级示例 使用XHR 和 promise 加载图像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> imgLoad(url) &#123;</span><br><span class="line">    // Create new promise with the Promise() constructor;</span><br><span class="line">    // This has as its argument a <span class="keyword">function</span></span><br><span class="line">    // with two parameters, resolve and reject</span><br><span class="line">  <span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</span><br><span class="line">        // Standard XHR to load an image</span><br><span class="line">    var request = new XMLHttpRequest();</span><br><span class="line">    request.open(<span class="string">'GET'</span>, url);</span><br><span class="line">    request.responseType = <span class="string">'blob'</span>;</span><br><span class="line">       // When the request loads, check whether it was successful</span><br><span class="line">    request.onload = <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.status === 200) &#123;</span><br><span class="line">         // If successful, resolve the promise by passing back the request response</span><br><span class="line">        resolve(request.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // If it fails, reject the promise with a error message</span><br><span class="line">        reject(Error(<span class="string">'Image didn\'</span>t load successfully; error code:<span class="string">' + request.statusText));</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    request.onerror = function() &#123;</span></span><br><span class="line"><span class="string">      // Also deal with the case when the entire request fails to begin with</span></span><br><span class="line"><span class="string">      // This is probably a network error, so reject the promise with an appropriate message</span></span><br><span class="line"><span class="string">        reject(Error('</span>There was a network error.<span class="string">'));</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">     // Send the request</span></span><br><span class="line"><span class="string">    request.send();</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  // Get a reference to the body element, and create a new image object</span></span><br><span class="line"><span class="string">var body = document.querySelector('</span>body<span class="string">');</span></span><br><span class="line"><span class="string">var myImage = new Image();</span></span><br><span class="line"><span class="string">  // Call the function with the URL we want to load, but then chain the</span></span><br><span class="line"><span class="string">  // promise then() method on to the end of it. This contains two callbacks</span></span><br><span class="line"><span class="string">imgLoad('</span>myLittleVader.jpg<span class="string">').then(function(response) &#123;</span></span><br><span class="line"><span class="string">    // The first runs when the promise resolves, with the request.response</span></span><br><span class="line"><span class="string">    // specified within the resolve() method.</span></span><br><span class="line"><span class="string">  var imageURL = window.URL.createObjectURL(response);</span></span><br><span class="line"><span class="string">  myImage.src = imageURL;</span></span><br><span class="line"><span class="string">  body.appendChild(myImage);</span></span><br><span class="line"><span class="string">    // The second runs when the promise</span></span><br><span class="line"><span class="string">    // is rejected, and logs the Error specified with the reject() method.</span></span><br><span class="line"><span class="string">&#125;, function(Error) &#123;</span></span><br><span class="line"><span class="string">  console.log(Error);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;About-Promise&quot;&gt;&lt;a href=&quot;#About-Promise&quot; class=&quot;headerlink&quot; title=&quot;About Promise&quot;&gt;&lt;/a&gt;About Promise&lt;/h1&gt;&lt;h5 id=&quot;推荐阅读-Link&quot;&gt;&lt;a href=&quot;#推荐阅读-Link&quot; class=&quot;headerlink&quot; title=&quot;推荐阅读 Link&quot;&gt;&lt;/a&gt;推荐阅读 &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/promise&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Link&lt;/a&gt;&lt;/h5&gt;&lt;h2 id=&quot;Basic-useage&quot;&gt;&lt;a href=&quot;#Basic-useage&quot; class=&quot;headerlink&quot; title=&quot;Basic useage&quot;&gt;&lt;/a&gt;Basic useage&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var promise1 = new Promise(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(resolve, reject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var obj = &amp;#123;code:200,message:&lt;span class=&quot;string&quot;&gt;&#39;ok&#39;&lt;/span&gt;,data:&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;() &amp;#123; //发起请求，请求处理（异步操作）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    resolve(obj); //成功之后&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, 300);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;promise1.then(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // expected output: &amp;#123; code: 200, message: &lt;span class=&quot;string&quot;&gt;&quot;ok&quot;&lt;/span&gt;, data: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).catch(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(e)&amp;#123;console.log(e)&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(promise1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// expected output: [object Promise]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第三篇文章</title>
    <link href="https://surlyyoung.github.io/2019/02/22/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://surlyyoung.github.io/2019/02/22/第三篇文章/</id>
    <published>2019-02-22T09:18:39.000Z</published>
    <updated>2019-02-22T09:20:25.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言-hexo-new-生成的-会出现在主页"><a href="#前言-hexo-new-生成的-会出现在主页" class="headerlink" title="前言 hexo new 生成的 会出现在主页"></a>前言 hexo new 生成的 会出现在主页</h1><h2 id="使用github-pages服务搭建博客的好处有："><a href="#使用github-pages服务搭建博客的好处有：" class="headerlink" title="使用github pages服务搭建博客的好处有："></a>使用github pages服务搭建博客的好处有：</h2><h3 id="这是第三条博客"><a href="#这是第三条博客" class="headerlink" title="这是第三条博客"></a>这是第三条博客</h3><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li></ol><a id="more"></a><ol start="4"><li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>等等；</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言-hexo-new-生成的-会出现在主页&quot;&gt;&lt;a href=&quot;#前言-hexo-new-生成的-会出现在主页&quot; class=&quot;headerlink&quot; title=&quot;前言 hexo new 生成的 会出现在主页&quot;&gt;&lt;/a&gt;前言 hexo new 生成的 会出现在主页&lt;/h1&gt;&lt;h2 id=&quot;使用github-pages服务搭建博客的好处有：&quot;&gt;&lt;a href=&quot;#使用github-pages服务搭建博客的好处有：&quot; class=&quot;headerlink&quot; title=&quot;使用github pages服务搭建博客的好处有：&quot;&gt;&lt;/a&gt;使用github pages服务搭建博客的好处有：&lt;/h2&gt;&lt;h3 id=&quot;这是第三条博客&quot;&gt;&lt;a href=&quot;#这是第三条博客&quot; class=&quot;headerlink&quot; title=&quot;这是第三条博客&quot;&gt;&lt;/a&gt;这是第三条博客&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;全是静态文件，访问速度快；&lt;/li&gt;
&lt;li&gt;免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；&lt;/li&gt;
&lt;li&gt;可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>try again</title>
    <link href="https://surlyyoung.github.io/2019/02/22/try-again/"/>
    <id>https://surlyyoung.github.io/2019/02/22/try-again/</id>
    <published>2019-02-22T07:31:01.000Z</published>
    <updated>2019-02-22T07:35:12.976Z</updated>
    
    <content type="html"><![CDATA[<p>try to connent surlyyoung.github.io</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;try to connent surlyyoung.github.io&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>first time  writing in my blog</title>
    <link href="https://surlyyoung.github.io/2019/02/22/first-time-writing-in-my-blog/"/>
    <id>https://surlyyoung.github.io/2019/02/22/first-time-writing-in-my-blog/</id>
    <published>2019-02-22T07:03:09.000Z</published>
    <updated>2019-02-22T07:05:08.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this-is-my-first-time-writing-in-my-blog"><a href="#this-is-my-first-time-writing-in-my-blog" class="headerlink" title="this is my first time writing in my blog!"></a>this is my first time writing in my blog!</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;this-is-my-first-time-writing-in-my-blog&quot;&gt;&lt;a href=&quot;#this-is-my-first-time-writing-in-my-blog&quot; class=&quot;headerlink&quot; title=&quot;this is my f
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://surlyyoung.github.io/2019/02/22/hello-world/"/>
    <id>https://surlyyoung.github.io/2019/02/22/hello-world/</id>
    <published>2019-02-22T06:44:25.619Z</published>
    <updated>2019-02-22T06:44:25.619Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
